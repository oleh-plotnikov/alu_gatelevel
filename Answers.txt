2.1
  Benefits of behavioral design style lie in the fact that such a style apparently
describes the work of development of the device, and this code is easy to write,
read and understand the algorithm of the device. 
Behavioral writing style is similar to other programming languages. 
In this style it is easy describe parametrical device.

  Disadvantages of this style are that you can accidentally write a code that is not synthesized, although it is modeled. 
Disadvantage is that in the behavioral style of writing complex logic is described and 
synthesizer decides how synthesized circuit will look, but it is not always an optimize circuit.

2.2
  Structural design style lets us describe the device to gate level abstractions, 
which can optimize the circuit and reduce the areas and consuming of power, and time delays. 
Structural design allows you to create individual modules and then they join them into ready to devise, 
this style makes it possible for to various engineers to write
individual modules and get ready project from them.

  The disadvantage of this style is the need for knowledge of the module on gate level abstractions and complexity of its description. 
The complexity of writing code is higher compared to behavioral style.


2.3
  It is better to use behavioral style when describing the devices at low levels of hierarchy and structural on the upper levels. 
For example, we have a complex device, which can be divided into several small modules,
which various engineers can develop independently.
After that we can describe the device which consists of this module using structural style, as connection between them.
Verilog allows to mix these styles if needed. It gives a great flexibility to an engineer.


2.4
  Generate construction is a very powerful tool to describe the device. Especially
if you need to make parameterized or itâ€™s description covers a large amount of code lines, often at repeated elements.
Unlike `ifdef statement generate can use if, case, or for-loops,
which gives it more flexibility. `Ifdef can be used when you can do the
module more universal to do more, and depending on conditions it is necessary to write a string of one kind or another. 
Although generate is more powerful than `ifdef, it is recommended to use `ifdef if possible because generate 
appeared in Verilog-2001 and is not supported in Verilog-1995.
